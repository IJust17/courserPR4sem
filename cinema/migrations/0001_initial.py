# Generated by Django 5.1 on 2025-06-12 13:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, unique=True, verbose_name='имя актёра')),
                ('bio', models.TextField(blank=True, verbose_name='биография')),
            ],
            options={
                'verbose_name': 'актёр',
                'verbose_name_plural': 'актёры',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Cinema',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='кинотеатр')),
                ('address', models.TextField(verbose_name='адрес')),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='широта')),
                ('lng', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='долгота')),
                ('contact_info', models.TextField(blank=True, verbose_name='контакты')),
            ],
            options={
                'verbose_name': 'кинотеатр',
                'verbose_name_plural': 'кинотеатры',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='страна')),
            ],
            options={
                'verbose_name': 'страна',
                'verbose_name_plural': 'страны',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='жанр')),
            ],
            options={
                'verbose_name': 'жанр',
                'verbose_name_plural': 'жанры',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='создан')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Hall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='зал')),
                ('rows', models.PositiveIntegerField(verbose_name='ряды')),
                ('seats_per_row', models.PositiveIntegerField(verbose_name='мест в ряду')),
                ('cinema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='halls', to='cinema.cinema', verbose_name='кинотеатр')),
            ],
            options={
                'verbose_name': 'зал',
                'verbose_name_plural': 'залы',
                'unique_together': {('cinema', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='название')),
                ('description', models.TextField(verbose_name='описание')),
                ('release_date', models.DateField(verbose_name='дата выхода')),
                ('poster', models.ImageField(blank=True, null=True, upload_to='posters/', verbose_name='постер')),
                ('avg_rating', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=4, verbose_name='средняя оценка (денорм.)')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cinema.country', verbose_name='страна')),
                ('main_genre', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='main_movies', to='cinema.genre', verbose_name='основной жанр')),
            ],
            options={
                'verbose_name': 'фильм',
                'verbose_name_plural': 'фильмы',
                'ordering': ['-release_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='MovieActor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(max_length=120, verbose_name='роль')),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.actor')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.movie')),
            ],
            options={
                'verbose_name': 'роль актёра',
                'verbose_name_plural': 'роли актёров',
                'unique_together': {('movie', 'actor')},
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='actors',
            field=models.ManyToManyField(related_name='movies', through='cinema.MovieActor', to='cinema.actor', verbose_name='актёры'),
        ),
        migrations.CreateModel(
            name='MovieGenre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.genre')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cinema.movie')),
            ],
            options={
                'verbose_name': 'доп. жанр фильма',
                'verbose_name_plural': 'доп. жанры фильма',
                'unique_together': {('movie', 'genre')},
            },
        ),
        migrations.AddField(
            model_name='movie',
            name='genres',
            field=models.ManyToManyField(related_name='movies', through='cinema.MovieGenre', to='cinema.genre', verbose_name='жанры'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], verbose_name='оценка')),
                ('review_text', models.TextField(blank=True, verbose_name='текст отзыва')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='создан')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='cinema.movie', verbose_name='фильм')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='автор')),
            ],
            options={
                'verbose_name': 'отзыв',
                'verbose_name_plural': 'отзывы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_num', models.PositiveIntegerField(verbose_name='ряд')),
                ('seat_num', models.PositiveIntegerField(verbose_name='место')),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seats', to='cinema.hall', verbose_name='зал')),
            ],
            options={
                'verbose_name': 'место',
                'verbose_name_plural': 'места',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('starts_at', models.DateTimeField(verbose_name='начало сеанса')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='стоимость')),
                ('hall', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sessions', to='cinema.hall', verbose_name='зал')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sessions', to='cinema.movie', verbose_name='фильм')),
            ],
            options={
                'verbose_name': 'сеанс',
                'verbose_name_plural': 'сеансы',
                'ordering': ['starts_at'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('reserved', 'зарезервирован'), ('paid', 'оплачен'), ('cancelled', 'отменён')], default='reserved', max_length=10, verbose_name='статус')),
                ('purchased_at', models.DateTimeField(blank=True, null=True, verbose_name='время покупки')),
                ('seat', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='cinema.seat', verbose_name='место')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='cinema.session', verbose_name='сеанс')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to=settings.AUTH_USER_MODEL, verbose_name='покупатель')),
            ],
            options={
                'verbose_name': 'билет',
                'verbose_name_plural': 'билеты',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='дата добавления')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='cinema.movie', verbose_name='фильм')),
            ],
            options={
                'verbose_name': 'избранное',
                'verbose_name_plural': 'избранное',
                'ordering': ['-added_at'],
                'unique_together': {('user', 'movie')},
            },
        ),
        migrations.AddConstraint(
            model_name='movie',
            constraint=models.UniqueConstraint(fields=('title', 'release_date'), name='unique_movie_title_year'),
        ),
        migrations.AlterUniqueTogether(
            name='seat',
            unique_together={('hall', 'row_num', 'seat_num')},
        ),
        migrations.AlterUniqueTogether(
            name='ticket',
            unique_together={('session', 'seat')},
        ),
    ]
